<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Program.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Program.cs" />
              <option name="originalContent" value="using CommandLine;&#10;&#10;namespace SpriteStitcher;&#10;&#10;class Program&#10;{&#10;&#10;    [Verb(&quot;stitch&quot;, true, HelpText = &quot;Stitch all PNG images in the specified directory into a sprite atlas.&quot;)]&#10;    private class StitchOptions&#10;    {&#10;        [Value(0,&#10;            MetaName = &quot;input-directory&quot;,&#10;            Required = true,&#10;            HelpText = &quot;Directory containing PNG images to stitch.&quot;)]&#10;        public string InputDirectory { get; set; } = string.Empty;&#10;        &#10;        [Option('p',&#10;            &quot;padding&quot;,&#10;            Required = false,&#10;            HelpText = &quot;Padding between images in the atlas, in pixels (default: 2).&quot;,&#10;            Default = 2)]&#10;        public int Padding { get; set; } = 2;&#10;        &#10;        [Option('m',&#10;            &quot;max-atlas-width&quot;,&#10;            Required = false,&#10;            HelpText = &quot;Maximum width of the atlas, in pixels (default: 4096).&quot;,&#10;            Default = 4096)]&#10;        public int MaxAtlasWidth { get; set; } = 4096;&#10;        &#10;        [Option('n', &quot;atlas-name&quot;, Required = false, HelpText = &quot;Name for the output atlas file (default: atlas.png).&quot;)]&#10;        public string AtlasName { get; set; } = &quot;atlas.png&quot;;&#10;        &#10;        public string OutputDirectory =&gt; Path.Combine(InputDirectory, &quot;stitched&quot;);&#10;&#10;        [Option('c', &quot;custom-metadata-pointer&quot;, &#10;            Default = null,&#10;            Required = false, &#10;            HelpText = &quot;Configure the path the metadata will point to. &quot; + &#10;                       &quot;Useful for game engines, like \&quot;res://\&quot; for Godot. &quot; +&#10;                       &quot;If omitted, defaults to the absolute path of the atlas file.&quot;)]&#10;        public string? CustomAtlasPathInMetadata { get; set; }&#10;    }&#10;&#10;    [Verb(&quot;unstitch&quot;,&#10;        HelpText =&#10;            &quot;Read the atlas.png and atlas.json in the specified directory and unstitch them into individual images.&quot;)]&#10;    private class UnstitchOptions&#10;    {&#10;        [Value(0, MetaName = &quot;input-directory&quot;, Required = true, HelpText = &quot;The absolute path to the atlas PNG file.&quot;)]&#10;        public string InputDirectory { get; set; } = string.Empty;&#10;    }&#10;    &#10;    private static void Main()&#10;    {&#10;        Console.WriteLine(&quot;SpriteStitcher - Create Sprite Atlases from a directory of images&quot;);&#10;        Console.WriteLine(&quot;---------------------------------------------------&quot;);&#10;        Console.WriteLine(&quot;This tool can stitch together images from a specified directory into a single sprite atlas.&quot;);&#10;        Console.WriteLine(&quot;Then the relevant metadata is saved to a JSON file and, along with the atlas,&quot;);&#10;        Console.WriteLine(&quot;is placed in a separate folder in your directory for easy access.&quot;);&#10;        Console.WriteLine(&quot;Alternatively, you can also unstitch an atlas back into individual images.&quot;);&#10;&#10;        ParseLoop();&#10;&#10;        Console.WriteLine(&quot;Thank you for using SpriteStitcher! Press any key to exit.&quot;);&#10;        Console.ReadKey();&#10;    }&#10;&#10;    private static void ParseLoop()&#10;    {&#10;        Console.WriteLine(&quot;Type 'help' or use --help after a command for usage. Type Ctrl+C to exit.&quot;);&#10;&#10;        var keepRunning = true;&#10;        while (keepRunning)&#10;        {&#10;            Console.WriteLine(&quot;---------------------------------------------------&quot;);&#10;            Console.Write(&quot;sprite-stitcher&gt; &quot;);&#10;            var rawInput = Console.ReadLine();&#10;            if (rawInput == null)&#10;            {&#10;                // EOF (unlikely in typical console usage) -&gt; exit&#10;                break;&#10;            }&#10;            if (string.IsNullOrWhiteSpace(rawInput))&#10;            {&#10;                continue; // ignore empty lines&#10;            }&#10;&#10;            var tokens = rawInput.Split(' ', StringSplitOptions.RemoveEmptyEntries);&#10;            // Explicit help handling so we don't treat it as an attempted operation.&#10;            if (tokens.Length == 1 &amp;&amp; tokens[0].Equals(&quot;help&quot;, StringComparison.OrdinalIgnoreCase))&#10;            {&#10;                // Trigger library help generation by simulating --help&#10;                Parser.Default.ParseArguments&lt;StitchOptions, UnstitchOptions&gt;(new[] {&quot;--help&quot;});&#10;                continue; // No prompt after help&#10;            }&#10;&#10;            bool attemptedOperation = false; // set only when a verb successfully parsed and executed&#10;            bool operationSucceeded = false; // reflects out param from handlers&#10;&#10;            var parserResult = Parser.Default.ParseArguments&lt;StitchOptions, UnstitchOptions&gt;(tokens);&#10;            parserResult&#10;                .WithParsed&lt;StitchOptions&gt;(opts =&gt;&#10;                {&#10;                    attemptedOperation = true;&#10;                    AtlasHandler.StitchAtlas(&#10;                        opts.InputDirectory,&#10;                        opts.OutputDirectory,&#10;                        opts.Padding,&#10;                        opts.MaxAtlasWidth,&#10;                        opts.AtlasName,&#10;                        opts.CustomAtlasPathInMetadata!, // handled inside StitchAtlas&#10;                        out operationSucceeded);&#10;                })&#10;                .WithParsed&lt;UnstitchOptions&gt;(opts =&gt;&#10;                {&#10;                    attemptedOperation = true;&#10;                    AtlasHandler.UnstitchAtlas(opts.InputDirectory, out operationSucceeded);&#10;                })&#10;                .WithNotParsed(errors =&gt;&#10;                {&#10;                    // CommandLine library already outputs errors/help. We intentionally do nothing more here.&#10;                    // Since we did not attempt an operation, no prompt will be shown.&#10;                });&#10;&#10;            if (attemptedOperation)&#10;            {&#10;                // After any attempt (success or failure) ask if user wants another operation.&#10;                if (!QueryYesNo(&quot;Would you like to perform another operation?&quot;))&#10;                {&#10;                    keepRunning = false;&#10;                }&#10;            }&#10;            // If not attempted (help, unknown command, parse errors) we just loop again without prompting.&#10;        }&#10;    }&#10;&#10;    public static bool QueryYesNo(string question)&#10;    {&#10;        while (true)&#10;        {&#10;            Console.WriteLine(question + &quot; (y/n)&quot;);&#10;            var response = Console.ReadKey();&#10;            Console.WriteLine();&#10;            switch (response.Key)&#10;            {&#10;                case ConsoleKey.Y:&#10;                    return true;&#10;                case ConsoleKey.N:&#10;                    return false;&#10;                default:&#10;                    Console.WriteLine(&quot;Please enter 'y' or 'n'.&quot;);&#10;                    break;&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="using CommandLine;&#10;&#10;namespace SpriteStitcher;&#10;&#10;class Program&#10;{&#10;&#10;    [Verb(&quot;stitch&quot;, true, HelpText = &quot;Stitch all PNG images in the specified directory into a sprite atlas.&quot;)]&#10;    private class StitchOptions&#10;    {&#10;        [Value(0,&#10;            MetaName = &quot;input-directory&quot;,&#10;            Required = true,&#10;            HelpText = &quot;Directory containing PNG images to stitch.&quot;)]&#10;        public string InputDirectory { get; set; } = string.Empty;&#10;        &#10;        [Option('p',&#10;            &quot;padding&quot;,&#10;            Required = false,&#10;            HelpText = &quot;Padding between images in the atlas, in pixels (default: 2).&quot;,&#10;            Default = 2)]&#10;        public int Padding { get; set; } = 2;&#10;        &#10;        [Option('m',&#10;            &quot;max-atlas-width&quot;,&#10;            Required = false,&#10;            HelpText = &quot;Maximum width of the atlas, in pixels (default: 4096).&quot;,&#10;            Default = 4096)]&#10;        public int MaxAtlasWidth { get; set; } = 4096;&#10;        &#10;        [Option('n', &quot;atlas-name&quot;, Required = false, HelpText = &quot;Name for the output atlas file (default: atlas.png).&quot;)]&#10;        public string AtlasName { get; set; } = &quot;atlas.png&quot;;&#10;        &#10;        public string OutputDirectory =&gt; Path.Combine(InputDirectory, &quot;stitched&quot;);&#10;&#10;        [Option('c', &quot;custom-metadata-pointer&quot;, &#10;            Default = null,&#10;            Required = false, &#10;            HelpText = &quot;Configure the path the metadata will point to. &quot; + &#10;                       &quot;Useful for game engines, like \&quot;res://\&quot; for Godot. &quot; +&#10;                       &quot;If omitted, defaults to the absolute path of the atlas file.&quot;)]&#10;        public string? CustomAtlasPathInMetadata { get; set; }&#10;    }&#10;&#10;    [Verb(&quot;unstitch&quot;,&#10;        HelpText =&#10;            &quot;Read the atlas.png and atlas.json in the specified directory and unstitch them into individual images.&quot;)]&#10;    private class UnstitchOptions&#10;    {&#10;        [Value(0, MetaName = &quot;input-directory&quot;, Required = true, HelpText = &quot;The absolute path to the atlas PNG file.&quot;)]&#10;        public string InputDirectory { get; set; } = string.Empty;&#10;    }&#10;    &#10;    private static void Main()&#10;    {&#10;        Console.WriteLine(&quot;SpriteStitcher - Create Sprite Atlases from a directory of images&quot;);&#10;        Console.WriteLine(&quot;---------------------------------------------------&quot;);&#10;        Console.WriteLine(&quot;This tool can stitch together images from a specified directory into a single sprite atlas.&quot;);&#10;        Console.WriteLine(&quot;Then the relevant metadata is saved to a JSON file and, along with the atlas,&quot;);&#10;        Console.WriteLine(&quot;is placed in a separate folder in your directory for easy access.&quot;);&#10;        Console.WriteLine(&quot;Alternatively, you can also unstitch an atlas back into individual images.&quot;);&#10;&#10;        ParseLoop();&#10;&#10;        Console.WriteLine(&quot;Thank you for using SpriteStitcher! Press any key to exit.&quot;);&#10;        Console.ReadKey();&#10;    }&#10;&#10;    private static void ParseLoop()&#10;    {&#10;        Console.WriteLine(&quot;Type 'help' or use --help after a command for usage. Type Ctrl+C to exit.&quot;);&#10;&#10;        var keepRunning = true;&#10;        while (keepRunning)&#10;        {&#10;            Console.WriteLine(&quot;---------------------------------------------------&quot;);&#10;            Console.Write(&quot;sprite-stitcher&gt; &quot;);&#10;            var rawInput = Console.ReadLine();&#10;            if (rawInput == null)&#10;            {&#10;                // EOF (unlikely in typical console usage) -&gt; exit&#10;                break;&#10;            }&#10;            if (string.IsNullOrWhiteSpace(rawInput))&#10;            {&#10;                continue; // ignore empty lines&#10;            }&#10;&#10;            var tokens = rawInput.Split(' ', StringSplitOptions.RemoveEmptyEntries);&#10;            // Explicit help handling so we don't treat it as an attempted operation.&#10;            if (tokens.Length == 1 &amp;&amp; tokens[0].Equals(&quot;help&quot;, StringComparison.OrdinalIgnoreCase))&#10;            {&#10;                // Trigger library help generation by simulating --help&#10;                Parser.Default.ParseArguments&lt;StitchOptions, UnstitchOptions&gt;(new[] {&quot;--help&quot;});&#10;                continue; // No prompt after help&#10;            }&#10;&#10;            bool attemptedOperation = false; // set only when a verb successfully parsed and executed&#10;            bool operationSucceeded = false; // reflects out param from handlers&#10;&#10;            var parserResult = Parser.Default.ParseArguments&lt;StitchOptions, UnstitchOptions&gt;(tokens);&#10;            parserResult&#10;                .WithParsed&lt;StitchOptions&gt;(opts =&gt;&#10;                {&#10;                    attemptedOperation = true;&#10;                    AtlasHandler.StitchAtlas(&#10;                        opts.InputDirectory,&#10;                        opts.OutputDirectory,&#10;                        opts.Padding,&#10;                        opts.MaxAtlasWidth,&#10;                        opts.AtlasName,&#10;                        opts.CustomAtlasPathInMetadata!, // handled inside StitchAtlas&#10;                        out operationSucceeded);&#10;                })&#10;                .WithParsed&lt;UnstitchOptions&gt;(opts =&gt;&#10;                {&#10;                    attemptedOperation = true;&#10;                    AtlasHandler.UnstitchAtlas(opts.InputDirectory, out operationSucceeded);&#10;                })&#10;                .WithNotParsed(errors =&gt;&#10;                {&#10;                    // CommandLine library already outputs errors/help. We intentionally do nothing more here.&#10;                    // Since we did not attempt an operation, no prompt will be shown.&#10;                });&#10;&#10;            if (attemptedOperation)&#10;            {&#10;                // After any attempt (success or failure) ask if user wants another operation.&#10;                if (!QueryYesNo(&quot;Would you like to perform another operation?&quot;))&#10;                {&#10;                    keepRunning = false;&#10;                }&#10;            }&#10;            // If not attempted (help, unknown command, parse errors) we just loop again without prompting.&#10;        }&#10;    }&#10;&#10;    public static bool QueryYesNo(string question)&#10;    {&#10;        while (true)&#10;        {&#10;            Console.WriteLine(question + &quot; (y/n)&quot;);&#10;            var response = Console.ReadKey();&#10;            Console.WriteLine();&#10;            switch (response.Key)&#10;            {&#10;                case ConsoleKey.Y:&#10;                    return true;&#10;                case ConsoleKey.N:&#10;                    return false;&#10;                default:&#10;                    Console.WriteLine(&quot;Please enter 'y' or 'n'.&quot;);&#10;                    break;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>